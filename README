In cadrul fisierului header map_reduce.h sunt definite functiile ce vor fi 
implementate in fiserul sursa map_reduce.cpp, se defineste structura necesara 
transmiterii parametrilor necesari functiei de thread, si se includ 
toate librariile utilizate. 

In cadrul functiei main se citesc numarul M de thread-uri mapper, numarul R 
de thread-uri reducer si fisierul din care se va citi, cu ajutorul functiei 
get_args. Se initializeaza map-ul folosit pentru stocarea rezultatelor partiale, 
care are drept cheie id-ul thread-ului mapper si drept valoare un vector de 
liste, cu semnificatia: la pozitia i din vector se afla lista numerelor care 
sunt puteri perfecte ale lui (i + 2) (exponentii incep de la 2). Fisierele din 
care vor citi thread-urile mapper se pun intr-o coada, pentru obtinerea facila 
a primului element. Se initializeaza un mutex si o bariera, pentru asigurarea 
executarii corecte a operatiilor. Se definesc argumentele date functiei de 
thread, atribuind campului thread_id un numar de la 0 la (M + R), astfel incat 
un id de la 0 la M sa apartina unui thread mapper, iar de la M (inclusiv) la 
(M + R) sa apartina unui reducer. Se creeaza thread-urile cu functia de thread 
thread_function, apoi se va astepta executia acestora. 

Functia get_args citeste numarul de thread-uri mapper si reducer si fisierul 
din care se citesc fisierele din care vor citi thread-urile mapper. 

Functia thread_function executa urmatoarele: daca thread-ul curent este de tip 
mapper, se apeleaza functia mapper pentru a realiza operatiile necesare. Apoi, 
este implementata o bariera care asigura faptul ca operatiile corespunzatoare 
thread-urilor de tip reducer vor incepe abia dupa finalizarea operatiilor 
thread-urilor mapper. Dupa ce toate thread-urile au ajuns la bariera, daca 
id-ul thread-ului curent indica un thread de tip reducer, se executa 
operatiile necesare, apeland functia reducer. 

In cadrul functiei mapper, pentru alocarea dinamica a fisierelor din care va 
citi fiecare thread, se scoate cate un element (fisier) din coada si se executa 
operatiile aferente, pana cand coada devine goala (s-a efectuat citirea din toate 
fisierele). Intrucat se citeste de la si se scrie la o resursa partajata (coada), 
se va folosi un mutex pentru a delimita aceasta zona critica. Apoi, pentru fiecare 
valoare citita din fisier, pentru fiecare exponent (2, ... (R + 1)), se verifica 
daca este o putere perfecta a acestui exponent, in caz pozitiv adaugand aceasta 
valoare in lista corespunzatoare din vectorul din map de la intrarea corespunzatoare 
id-ului thread-ului curent. 

In cadrul functiei reducer se concateneaza toate listele de numere aferente 
exponentului determinat de id-ul thread-ului, lista astfel creata fiind apoi 
introdusa intr-un set, pentru a obtine toate elementele unice. Astfel, numarul 
de valori unice de puteri perfecte ale exponentului curent va fi dimensiunea 
set-ului obtinut. Acest numar va fi scris in fisierul corespunzator. 

Functia is_power_of verifica daca exista un numar care, ridicat la puterea e, 
este egal cu n, aplicand algoritmul de cautare binara. 


-- Implementare generica --

Pentru implementarea Map-Reduce pentru orice tip de date, map-ul in care 
vor fi stocate rezultatele partiale va avea cheia de tip int, valoarea de 
la aceasta reprezentand rezultatele obtinute in urma aplicarii operatiilor 
mapper pe fisierele citite de thread-ul egal cu cheia, iar valoarea va avea 
tipul unui vector (de dimensiune R) de liste de orice tip, astfel incat 
la index-ul i din vector se vor afla listele ce vor fi combinate de thread-ul 
corespunzator acestui index. 

Pentru ca un mapper sau un reducer sa poata realiza orice tip de operatii, 
aplicate asupra tipurilor de date citite, functiile de mapper si reducer vor 
mai primi inca un parametru reprezentand functia in cadrul careia se vor aplica 
operatiile dorite. Astfel, se definesc tipurile de functii mapper_ops si 
reducer_ops, care: mapper_ops, primind ca parametru structura de argument 
definita si numele fisierului din care sa citeasca, va citi si prelucra 
datele citite din acest fisier, actualizand corespunzator intrarea din map; 
reducer_ops primeste drept parametru (pe langa structura de argument definita) 
o lista (de orice tip) rezultata in urma combinarii rezultatelor partiale in 
cadrul functiei reducer si aplica asupra acesteia operatiile necesare in 
vederea obtinerii rezultatului care va fi scris in fisierul corespunzator. 

Cu scopul aplicarii Map-Reduce pentru problema gasirii puterilor perfecte 
s-au definit functiile mapper_perfect_powers si reducer_perfect_powers ce 
realizeaza operatiile corespunzatoare acestora. 

In cadrul functiei main se initializeaza map-ul cu valori de tipul vector 
de liste de int, pentru cazul particular al problemei gasirii puterilor 
perfecte. Structura ce va fi data drept argument este initializata cu 
tipul de date int, astfel incat campul map al structurii sa aiba acelasi 
tip cu map-ul definit mai devreme. Campurile opM si opR ale acestei structuri 
vor fi initializate cu functiile definite mapper_perfect_powers si 
reducer_perfect_powers. 

Astfel, pentru aplicarea paradigmei Map-Reduce pe un alt tip de date si 
cu alte functii de procesare din cadrul functiilor mapper si reducer, se 
vor urma aceiasi pasi, modificand tipul de date din definitia map-ului si 
si a structurii ce va fi data ca argument, si completand campurile functiilor 
acestei structuri cu functiile dorite. 
